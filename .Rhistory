View(german_data)
View(german_data)
# Packages
library(dplyr)
library(ggplot2)
View(german_data)
set.seed(13383645)
#Reading Data
german_credit = read.table(
"http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data")
View(german_credit)
#Assigning variable names
colnames(german_credit)=c("chk_acct","duration","credit_his","purpose","amount",
"saving_acct","present_emp","installment_rate","sex",
"other_debtor","present_resid","property","age",
"other_install","housing","n_credits","job","n_people",
"telephone","foreign","response")
View(german_credit)
rm(list = ls())
# Packages ---------------------------------------------------------------------
library(dplyr)
library(ggplot2)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/01__German_Credit_Data/"
german_data <- read.csv(file.path(
path_data, "02__Processed-Data/01__German-Credit-Data.csv"))
View(german_data)
str(german_data)
rm(list = ls())
# Packages ---------------------------------------------------------------------
library(dplyr)
library(ggplot2)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
View(credit_risk)
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length)
View(credit_risk_processed)
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = case_when(
home == "OWN" ~ 1,
home == "MORTGAGE" ~ 2,
home == "RENT" ~ 3
))
View(credit_risk_processed)
table(credit_risk$person_home_ownership)
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = case_when(
home == "OWN" ~ 1,
home == "MORTGAGE" ~ 2,
home == "RENT" ~ 3,
home == "OTHER" ~ 4
))
table(credit_risk_processed$home)
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(
home == "OWN" ~ 1,
home == "MORTGAGE" ~ 2,
home == "RENT" ~ 3,
home == "OTHER" ~ 4
))
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
))
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
))
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
))
View(credit_risk_processed)
table(credit_risk$loan_intent)
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
))
View(credit_risk_processed)
table(credit_risk$cb_person_default_on_file)
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
)) %>%
mutate(historical_default = recode(historical_default,
"N" = 0,
"Y" = 1
))
View(credit_risk_processed)
# Processing -------------------------------------------------------------------
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
)) %>%
mutate(historical_default = recode(historical_default,
"N" = 0,
"Y" = 1
)) %>%
select(loan_status, everything())
View(credit_risk_processed)
View(credit_risk_processed)
box(credit_risk_processed)
box(credit_risk_processed)
boxplot(credit_risk_processed)
boxplot(credit_risk_processed$age)
# Removing outliers
credit_risk_processed <- credit_risk_processed %>%
filter(age > 100) %>%
filter(income_year >= 6000000) %>%
filter(employment_years > 100)
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
# Renaming and recoding
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
)) %>%
mutate(historical_default = recode(historical_default,
"N" = 0,
"Y" = 1
)) %>%
select(loan_status, everything())
# Removing outliers
credit_risk_processed <- credit_risk_processed %>%
filter(age > 100)
View(credit_risk_processed)
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
# Renaming and recoding
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
)) %>%
mutate(historical_default = recode(historical_default,
"N" = 0,
"Y" = 1
)) %>%
select(loan_status, everything())
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
# Renaming and recoding
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
)) %>%
mutate(historical_default = recode(historical_default,
"N" = 0,
"Y" = 1
)) %>%
select(loan_status, everything())
# Removing outliers
credit_risk_processed <- credit_risk_processed %>%
filter(!age > 100)
View(credit_risk_processed)
# Removing outliers
credit_risk_processed <- credit_risk_processed %>%
filter(!age > 100) %>%
filter(!income_year >= 6000000) %>%
filter(!employment_years > 100)
View(credit_risk_processed)
rm(list = ls())
library(dplyr)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/07__Credit_Risk_Data/"
credit_risk <- read.csv(file.path(path_data, "01__Data.csv"))
# Processing -------------------------------------------------------------------
# Renaming and recoding
credit_risk_processed <- credit_risk %>%
rename(age = person_age,
income_year = person_income,
home = person_home_ownership,
employment_years = person_emp_length,
historical_default = cb_person_default_on_file,
credit_history_length = cb_person_cred_hist_length) %>%
mutate(home = recode(home,
"OWN" = 1,
"MORTGAGE" = 2,
"RENT" = 3,
"OTHER" = 4
)) %>%
mutate(loan_intent = recode(loan_intent,
"DEBTCONSOLIDATION" = 1,
"EDUCATION" = 2,
"HOMEIMPROVEMENT" = 3,
"MEDICAL" = 4,
"PERSONAL" = 5,
"VENTURE" = 6
)) %>%
mutate(historical_default = recode(historical_default,
"N" = 0,
"Y" = 1
)) %>%
select(loan_status, everything())
# Removing outliers
credit_risk_processed <- credit_risk_processed %>%
filter(!age > 100) %>%
filter(!income_year >= 6000000) %>%
filter(!employment_years > 100)
boxplot(credit_risk_processed$age)
# Splitting data --------------------------------------------------------------
set.seed(345)
index_train <- sample(1:nrow(credit_risk_processed), 2 / 3 * nrow(credit_risk_processed))
# Create training set: training_set
training_set <- credit_risk_processed[index_train, ]
# Create test set: test_set
test_set <- credit_risk_processed[-index_train, ]
View(training_set)
View(training_set)
# Logistic Modelling -----------------------------------------------------------
log_model <- glm(formula = loan_status ~ ., family = "binomial",
data = training_set)
log_model
summary(log_model)
# Make PD-predictions for all test set elements using the the full logistic regression model
predictions_all_full <- predict(log_model,
newdata = test_set,
type = "response")
# Look at the predictions range
range(predictions_all_full)
library(rpart)
rm(list = ls())
library(dplyr)
library(rpart)
rm(list = ls())
library(dplyr)
library(rpart)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/01__German_Credit_Data/"
german_data <- read.csv(file.path(path_data, "03__Other/01b__Data_FRED.csv"))
View(german_data)
table(german_data$Class)
# Processing -------------------------------------------------------------------
german_data <- german_data %>%
mutate(Class = recode(Class, "Bad" = 0, "Good" = 1))
View(german_data)
# Splitting data --------------------------------------------------------------
set.seed(147)
# Store row numbers for training set: index_train
index_train <- sample(1:nrow(german_data), 2 / 3 * nrow(german_data))
# Create training set: training_set
training_set <- german_data[index_train, ]
# Create test set: test_set
test_set <- german_data[-index_train, ]
# Logistic Modelling -----------------------------------------------------------
log_model <- glm(formula = Class ~ ., family = "binomial",
data = training_set)
# Make PD-predictions for all test set elements using the the full logistic regression model
predictions_all_full <- predict(log_model,
newdata = test_set,
type = "response")
# Look at the predictions range
range(predictions_all_full)
fitted.values(log_model)
predicted_classes <- ifelse(predictions_all_full > 0.5, "Yes", "No")
# Evaluation
confusion_matrix <- table(predicted_classes, test_set$Class)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2])
recall <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ])
f1_score <- 2 * (precision * recall) / (precision + recall)
accuracy
pressure
ls
accuracy
precision
recall
f1_score
rm(list = ls())
library(dplyr)
library(rpart)
# Reading in data --------------------------------------------------------------
path_data <- "./01__Data/01__German_Credit_Data/"
german_data <- read.csv(file.path(path_data, "03__Other/01b__Data_FRED.csv"))
# Processing -------------------------------------------------------------------
german_data <- german_data %>%
mutate(Class = recode(Class, "Bad" = 0, "Good" = 1))
# Splitting data --------------------------------------------------------------
set.seed(147)
# Store row numbers for training set: index_train
index_train <- sample(1:nrow(german_data), 2 / 3 * nrow(german_data))
# Create training set: training_set
training_set <- german_data[index_train, ]
# Create test set: test_set
test_set <- german_data[-index_train, ]
# Logistic Modelling -----------------------------------------------------------
log_model <- glm(formula = Class ~ ., family = "binomial",
data = training_set)
# Make PD-predictions for all test set elements using the the full logistic regression model
predictions_all_full <- predict(log_model,
newdata = test_set,
type = "response")
# Look at the predictions range
range(predictions_all_full)
predicted_classes <- ifelse(predictions_all_full > 0.5, "Yes", "No")
# Evaluation
confusion_matrix <- table(predicted_classes, test_set$Class)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2])
recall <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ])
f1_score <- 2 * (precision * recall) / (precision + recall)
accuracy
precision
recall
f1_score
library(ggplot2)
library(gplots)
# Plotting evaluation
heatmap.2(confusion_matrix, main = "Confusion Matrix",
xlab = "Actual", ylab = "Predicted", col = c("lightblue", "pink"),
density.info = "none", trace = "none", key = FALSE)
View(german_data)
